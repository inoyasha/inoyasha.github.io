<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嘿~我叫郭小黑</title>
  
  <subtitle>书山有路勤为径，学海无涯苦作舟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.guoxiaohei.cn/"/>
  <updated>2019-08-25T11:22:56.657Z</updated>
  <id>https://www.guoxiaohei.cn/</id>
  
  <author>
    <name>郭小黑</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的使用工具地址</title>
    <link href="https://www.guoxiaohei.cn/2019/08/25/undefined.html"/>
    <id>https://www.guoxiaohei.cn/2019/08/25/undefined.html</id>
    <published>2019-08-25T11:15:00.000Z</published>
    <updated>2019-08-25T11:22:56.657Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><blockquote><p>将一些会经常用到的一些工具统一整理，方便使用。</p></blockquote><a id="more"></a><ul><li><a href="https://www.processon.com/diagrams" target="_blank" rel="noopener">系统设计架构图</a></li><li><a href="http://sc.chinaz.com/tupian/beijingtupian.html" target="_blank" rel="noopener">图片素材</a></li><li><a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="noopener">在线格式化</a></li><li><a href="https://www.bejson.com/convert/filesize/" target="_blank" rel="noopener">在线文件大小转换</a></li><li><a href="http://www.uuid.online/" target="_blank" rel="noopener">uuid在线生成</a></li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">idea注册码</a></li><li><a href="https://www.bestcssbuttongenerator.com/" target="_blank" rel="noopener">css button样式</a></li><li><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">在线cron表达式</a></li><li><a href="https://1024tools.com/json" target="_blank" rel="noopener">在线json表达式</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;将一些会经常用到的一些工具统一整理，方便使用。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="sorting" scheme="https://www.guoxiaohei.cn/categories/sorting/"/>
    
    
      <category term="资料整理" scheme="https://www.guoxiaohei.cn/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ARTS第四周</title>
    <link href="https://www.guoxiaohei.cn/2019/04/14/arts-fourth-week.html"/>
    <id>https://www.guoxiaohei.cn/2019/04/14/arts-fourth-week.html</id>
    <published>2019-04-14T15:00:39.000Z</published>
    <updated>2019-06-11T13:05:43.823Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h3 id="ARTS第四周"><a href="#ARTS第四周" class="headerlink" title="ARTS第四周"></a>ARTS第四周</h3><blockquote><p>每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）</p></blockquote><p><img src="/images/common/program.jpg" alt></p><a id="more"></a><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><p>来自leecode的一个简单的算法题——<a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">罗马数转整数</a>。</p><ul><li>解题思路<br>先用罗马数字的字母作为key值放到一个map中，然后将目标罗马数按照<code>&quot;&quot;</code>分解成一个字符串数组。遍历字符串数组，根据key获取对应的值进行相加，当满足一下条件时:<br><img src="/images/ARTS/arts-ranma-to-integer.png" alt><br>对其减去其相差值的2倍即可。</li></ul><p><strong>以上的做法，需要逻辑判断6次。代码看着不是很优雅。后面看了下评论，发现其实是解题没有充分思考。</strong></p><blockquote><p>通常情况下，罗马数字中小的数字在大的数字的右边。除了以上几种情况，如果当前字符代表的值不小于其右边，就加上该值；否则就减去该值。</p></blockquote><p>下面给出两种的代码，具体请看我的<a href="https://github.com/inoyasha/leecode/blob/master/roman-to-integer/src/com/guoxiaohei/RomanToInteger.java" target="_blank" rel="noopener">github</a>.</p><h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p>This week costs a lot of time to read a article that introduct some new frameworks to follow in 2019 and expression a lot of review to this.</p><ul><li>react.js</li><li>vue.js</li><li>jquery</li><li>kotlin</li><li>Elixir and Phoenix.</li><li>GraphQL</li></ul><p>In fact,i understand this technology a smaller part.Because of useing these less.but i approval view of author.</p><blockquote><p>As a developer, it is important to stay up to date with current technological developments as much as possible.</p></blockquote><p>憋了半天，还是词穷。我们在工作之外还是要了解一些更新在我们身边的技术，了解其利弊，对于日后的工作可能也会有帮助，它能开阔我们的眼界，当我们遇到技术难题时，也可能帮我们更好的扩展思路。但是其实主要的还是基础知识的把握，因为无论是哪种前端还是后端的技术，都离不开基础的东西。比如说vue.js 我觉得还是依赖于j原生的javascript。所以我们了解新技术，但是也要补充自己的基础知识，这样才能在以后的竞争中站的更稳。</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>最近在看极客时间的视频课程——玩转Git三剑客。里面有一些小技巧。</p><ul><li>配置最小配置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.emal xxx@xxx.com</span><br><span class="line">git config --glabal user.name xxx</span><br><span class="line">```  </span><br><span class="line">- git 重命名</span><br></pre></td></tr></table></figure></li></ul><p>git rename xx xxx.text<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git 将新文件提交到暂存区</span><br></pre></td></tr></table></figure><p></p><p>git add 新文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git 将修改的文件,删除的文件添加到暂存区</span><br><span class="line">```code</span><br><span class="line"> git add -u</span><br></pre></td></tr></table></figure><p></p><ul><li>git 有三个对象<br>1、commit （每次提交会生成一个commit对象。是一个uuid）<br>2、tree （类似文件目录树）<br>3、blob （具体的文件存储）</li></ul><h4 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h4><p>分享下最近糟糕的经历。最近leader让我负责一个项目，并把控项目的进度，说实话这个是我第一次把控项目进度。我先使用project(第一次使用)做了一下<br>简单的工期计划，在我预想中，这个工期是可以完成的。但是后续发生了一些不可控的问题。其中一个人没怎么写过页面，但是考虑到页面比较简单，我把这项工作交给他，做到后面的效果和实际的效果差距较大。并且没有及时和领导反馈。导致后面的工作要加班来完成。现在对于这个事情还是比较迷茫，感觉没有抓住重点，所以先记录下并总结几点。</p><ul><li>当遇到问题的时候，及时和领导反馈，让其协调其他人员。不要让不可控因素持续下去。</li><li>做好规划，并尽量详尽的给出可能的</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;ARTS第四周&quot;&gt;&lt;a href=&quot;#ARTS第四周&quot; class=&quot;headerlink&quot; title=&quot;ARTS第四周&quot;&gt;&lt;/a&gt;ARTS第四周&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/images/common/program.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ARTS" scheme="https://www.guoxiaohei.cn/categories/ARTS/"/>
    
    
  </entry>
  
  <entry>
    <title>ARTS第三周</title>
    <link href="https://www.guoxiaohei.cn/2019/04/06/arts-three-week.html"/>
    <id>https://www.guoxiaohei.cn/2019/04/06/arts-three-week.html</id>
    <published>2019-04-06T05:58:00.000Z</published>
    <updated>2019-06-11T13:05:43.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h3 id="ARTS第三周"><a href="#ARTS第三周" class="headerlink" title="ARTS第三周"></a>ARTS第三周</h3><blockquote><p>每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）</p></blockquote><p><img src="/images//common/program.jpg" alt></p><a id="more"></a><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><p>来自leecode的一个简单的算法题——<a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">回文数</a>。</p><p>思路：看到题目的时候，想将找一个数据进行按位数进行拆分成为一个数字，然后对于数组的元素来达到目的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">eg:121</span><br><span class="line">[1,2,1] 数组的长度为3，则比较数组中索引为0/2的数字是否相等。如果是</span><br><span class="line">数组的长度为5，则需要索引为0/4.1/3的数字是否分别相等。如果为偶数，则仅仅当数组中所有的元素都相同的时候，这个数为回文数。</span><br><span class="line"></span><br><span class="line">拆分的代码如下:</span><br><span class="line"></span><br><span class="line"> public static List&lt;Integer&gt; splitNum(int target) &#123;</span><br><span class="line">      List&lt;Integer&gt; split = new ArrayList&lt;&gt;();</span><br><span class="line">      int temp = target;</span><br><span class="line">      while (temp != 0) &#123;</span><br><span class="line">          int number = temp % 10;</span><br><span class="line">          split.add(number);</span><br><span class="line">          temp = temp / 10;</span><br><span class="line">      &#125;</span><br><span class="line">      return split;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p>在继续的过程中，发现其实可以参考下上周做的算法题——<a href="http://localhost:4000/2019/03/31/arts-second-week.html" target="_blank" rel="noopener">整数反转</a>的思路然后变通下。<br>我们发现当整数为负数时，这个数是不可能为回文数的。那么仅仅考虑正整数的情况。当目标数为正整数时，我们可以采用整数反转的形式，将数字反转过来，如果反转过来的数字和目标数字相同，那么这个数就是我们要的回文数。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPlindrome</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> reverse = reverse(target);</span><br><span class="line">            <span class="keyword">return</span> reverse == target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> reverse = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (target != <span class="number">0</span>) &#123;</span><br><span class="line">            reverse = <span class="number">10</span> * reverse + target % <span class="number">10</span>;</span><br><span class="line">            target /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse = (reverse &gt; Integer.MAX_VALUE || reverse &lt; Integer.MIN_VALUE) ? <span class="number">0</span> : reverse;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) reverse;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p>这周<code>review</code>的内容来自于<a href="https://medium.com/" target="_blank" rel="noopener">Medium</a>的一篇文章——<a href="https://medium.freecodecamp.org/how-to-easily-build-desktop-apps-with-html-css-and-javascript-d3e3f03f95a5" target="_blank" rel="noopener">怎么使用html、css和js简单的构建桌面应用</a></p><p>之前也见到过其他的项目使用nodejs构建桌面的客户端。也一直没有详细的了解过，文中作者一个前端框架——<a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>,这个框架使用html、css和js构建桌面项目并能够在多个平台上使用。Elactorn分为两个进程进行工作。一个是主进程，一个是渲染进程，主进程只有一个，二渲染进程是存在多个的，并且相互不会影响。</p><p><img src="/images/ARTS/Elactorn.png" alt></p><ul><li>安装npm依赖包。<br><code>npm install -g electron-forge</code></li><li><p>初始化应用。初始化的时间比较长，请耐心等待，我就卡在install npm Dependencies 好久.<br><code>electron-forge init simple-desktop-app-electronjs</code></p></li><li><p>启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd simple-desktop-app-electronjs</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li><li><p>应用打包</p><p><code>npm run package -- --platform=&lt;platform&gt; arch=&lt;architecture&gt;</code></p></li></ul><p>其他的可以参考Elactron官网了解。——<a href="https://electronjs.org/" target="_blank" rel="noopener">Elactron</a></p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>Springboot使用多数据源</p><p>碰到了一个迁移数据的功能。使用springboot创建多数据源。配置数据源基本信息。</p><p><img src="/images/ARTS/springboot-milt-data-source-001.png" alt></p><p>` 读取配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dataUsername;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dataPassword;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"cms.content-migrate"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsMigrateTables</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tables;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建多数据源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSourceConfiguration dataSourceConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceBeans</span><span class="params">(DataSourceConfiguration dataSourceConfiguration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceConfiguration = dataSourceConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"sourceDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">sourceDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DbBean sourceDb = dataSourceConfiguration.getSource();</span><br><span class="line">        DataSourceBuilder&lt;?&gt; dataSourceBuilder = DataSourceBuilder.create();</span><br><span class="line">        dataSourceBuilder.username(sourceDb.getDataUsername());</span><br><span class="line">        dataSourceBuilder.password(sourceDb.getDataPassword());</span><br><span class="line">        dataSourceBuilder.driverClassName(sourceDb.getDriverClassName());</span><br><span class="line">        dataSourceBuilder.url(sourceDb.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"targetDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">targetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DbBean targetDb = dataSourceConfiguration.getSource();</span><br><span class="line">        DataSourceBuilder&lt;?&gt; dataSourceBuilder = DataSourceBuilder.create();</span><br><span class="line">        dataSourceBuilder.username(targetDb.getDataUsername());</span><br><span class="line">        dataSourceBuilder.password(targetDb.getDataPassword());</span><br><span class="line">        dataSourceBuilder.driverClassName(targetDb.getDriverClassName());</span><br><span class="line">        dataSourceBuilder.url(targetDb.getUrl());</span><br><span class="line">        <span class="keyword">return</span> dataSourceBuilder.build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取数据源以后，可以使用jdbcTemplate或者spring-jpa进行数据库查询了。<br>以上配置基于springboot2.1.4配置。</p><p>参考文章:<a href="http://blog.didispace.com/springbootmultidatasource/" target="_blank" rel="noopener">Spring Boot多数据源配置与使用</a></p><h4 id="share"><a href="#share" class="headerlink" title="share"></a>share</h4><p>分享一个画拓扑图的工具吧。近期有一个画拓扑图的需求。使用图表可以使用echart或者jtopo等工具。后面比较了了一下，根据go.js画拓扑图是比较专业的。go-js的<a href="https://gojs.net/latest/learn/index.html" target="_blank" rel="noopener">官网</a>，如有需要的小伙伴可以参考下。</p><h4 id="写到最后的话"><a href="#写到最后的话" class="headerlink" title="写到最后的话"></a>写到最后的话</h4><p>这已经我打卡ARTS的第三周了，从接触ARTS到不断学习的过程，内心还是有些愉悦的，但是我做的还不是特别的好，希望在日后我也可以写出高质量的文章，并能够坚持下去，不断前行。加油！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;ARTS第三周&quot;&gt;&lt;a href=&quot;#ARTS第三周&quot; class=&quot;headerlink&quot; title=&quot;ARTS第三周&quot;&gt;&lt;/a&gt;ARTS第三周&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/images//common/program.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ARTS" scheme="https://www.guoxiaohei.cn/categories/ARTS/"/>
    
    
  </entry>
  
  <entry>
    <title>ARTS第二周</title>
    <link href="https://www.guoxiaohei.cn/2019/03/31/arts-second-week.html"/>
    <id>https://www.guoxiaohei.cn/2019/03/31/arts-second-week.html</id>
    <published>2019-03-31T11:00:48.000Z</published>
    <updated>2019-06-11T13:05:43.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h3 id="ARTS第二周"><a href="#ARTS第二周" class="headerlink" title="ARTS第二周"></a>ARTS第二周</h3><blockquote><p>每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS</p></blockquote><a id="more"></a><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><ul><li>题目来自于leecode的整数反转。</li><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</li><li>解答。<br>刚开始本来想着将Integer转成String然后在利用String的反转来做。但是还是利用了java的工具类。而且在处理起来也比较繁琐。并不太好处理越界的情况。<br>我们知道<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123%10=3;</span><br><span class="line">123/10=12;</span><br><span class="line">12%10=2;</span><br><span class="line">12/10=1;</span><br><span class="line">1/10=0;</span><br></pre></td></tr></table></figure></li></ul><p>我们每次对10取余数都能获取这个数的最后一位，然后在将目标数除以10获取这个数的n-1位。那我们是不是可以利用这个规律<code>（3*10 + 2）10 +1=321</code>来获得我们的结果呢。所以for循环重复上面的操作即可。</p><p>具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (target != 0) &#123;</span><br><span class="line">      reverse = 10 * reverse + target % 10;</span><br><span class="line">      target /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse = (reverse &gt; Integer.MAX_VALUE || reverse &lt; Integer.MIN_VALUE) ? 0 : reverse;</span><br><span class="line">    return (int) reverse;</span><br></pre></td></tr></table></figure><h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p>review看了一个关于git的一篇文章——如何成为一个git专家。<a href="https://medium.freecodecamp.org/how-to-become-a-git-expert-e7c38bf54826" target="_blank" rel="noopener">How to become a Git expert</a>。作者主要讲解了两个问题。</p><ul><li>当提交代码时，出错怎么处理。<br>比如说当你有6个文件进行提交的时候，但是最后你只是提交了5个，虽然可以在后面重新添加到git上并提交到本地，但是这次的提交看着并不是很优美。这个时候我们可以借助<code>git commit --amend -m “New commit message”</code> 来修改这次提交。但是请注意<strong>amend命令适合用于本地的修改，如果在远端仓库上使用，可能会导致代码的紊乱。</strong></li><li>当提交记录毕竟混乱的时候，应该如何处理。<br>我们知道git是一个版本控制工具，大部分的时候都是多人进行提交代码，当你有一个需求，已经确定大概需要10天左右才能完成，而在这个期间会有其他的人提交代码。保持远端和本地库的做法是一个比较好的方式，这能减少代码合并引起的冲突。作者在后续的内容中主要讲解了如何使用<code>rebase</code>命令来解决这个问题。具体的提交流程作者使用一个小例子进行了讲解。</li><li>思考。<br>在我看来<code>rebase</code>命令其实构建了<code>git-flow</code>的一个流程。国内大部分企业使用git的时候都可能在使用这个流程。详细可以看下这篇文章——<a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow" target="_blank" rel="noopener">git-flow 的工作流程</a>。rebase能让代码的提交流程看着更加清晰。并且在分支合并的时候可以进行coding的review过程。</li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>使用shell 脚本执行orientdb etl工具.<br>orientdb 有自己的etl工具。它是通过sh 脚本来进行数据迁移的。orientdb进行抽取的时候，大部分的使用场景还是全量迁移数据，但是当数据量比较大的时候，全量的迁移就会影响应用系统的正常使用。在每次进行抽取的时候，现将抽取时间放到一个文件中，然后执行orientdb脚本的时候，将时间通过<code>sed -i &quot;s/xx/xx&quot; filepath</code>的形式，将对应的json文件中的sql查询进行替换，查询增量数据，执行完抽取后，将最新的时间更新到配置文件中。<br>此次使用了sh 脚本读取配置文件的配置<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">采用了<span class="built_in">eval</span>的方式读取</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"<span class="variable">$line</span>"</span></span><br><span class="line"><span class="keyword">done</span> &lt; config</span><br></pre></td></tr></table></figure><p></p><p><code>config</code>是读取文件的路径.<br>其他的读取方式请参考——<a href="https://blog.csdn.net/xinfuqizao/article/details/21812003" target="_blank" rel="noopener">linux shell 读取配置文件</a></p><h4 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h4><p>此次分享说下我在我的Centos7环境上配置maven引发的问题。</p><ul><li>场景。<br>Centos上搭建idea环境，配置maven环境变量。在/etc/profile文件中添加了<code>MAVEM_HOME=/opt/xxx/maven/</code> 然后配置到了$PATH上，并执行了<code>source /etc/profile</code>命令，让其生效，当时试了一下<code>mvn -v</code>，好用了，觉得大功告成了。这为了后面的悲剧做了铺垫。</li><li>出现的问题。<br>当我将电脑重启了以后，发现使用我的账户登录以后，使用终端显示<code>-base-4.1$</code>这样的显示，切换成root账户登录的时候显示正常。</li><li><p>解决。<br>后来谷歌查询了一下有多个方式可以解决这个事情。<br>1、centos在创建新用户的时候，会将/etc/skel/下面的配置复制到新创建用户的配置中取，这个问题的出现是.bash等文件丢失引起的，将文件重新复制回来即可。<br>2、<code>vi ~/.bash_profile</code> 然后往文件中添加如下内容<code>export PS1=’[\u@\h \W]\$’</code></p></li><li><p>出现的原因。<br>但是配置maven的时候在maven的配置目录多配置了一个<code>/</code>，导致Centos的环境变量出现了紊乱导致。<br>重新复制了配置以后，在将环境变量多余的<code>/</code>去除掉。问题解决。</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;ARTS第二周&quot;&gt;&lt;a href=&quot;#ARTS第二周&quot; class=&quot;headerlink&quot; title=&quot;ARTS第二周&quot;&gt;&lt;/a&gt;ARTS第二周&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ARTS" scheme="https://www.guoxiaohei.cn/categories/ARTS/"/>
    
    
  </entry>
  
  <entry>
    <title>ARTS第一周</title>
    <link href="https://www.guoxiaohei.cn/2019/03/23/arts-first-week.html"/>
    <id>https://www.guoxiaohei.cn/2019/03/23/arts-first-week.html</id>
    <published>2019-03-23T12:07:00.000Z</published>
    <updated>2019-06-11T13:05:43.821Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h3 id="ARTS第一周"><a href="#ARTS第一周" class="headerlink" title="ARTS第一周"></a>ARTS第一周</h3><blockquote><p>每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）</p></blockquote><a id="more"></a><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><ul><li>题目<br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</li><li>作答<br>使用双层for循环，将两个数组对应的元素进行相加，如果结果等于目标值，则获取对应的数组下标。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">         int len = nums.length;</span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">          for (int j = 0; j &lt; i + 1; j++) &#123;</span><br><span class="line">            if (nums[i] + nums[j] == target &amp;&amp; i != j) &#123;</span><br><span class="line">              return new int[]&#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><p><a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">Spring5.0官方文档</a></p><p>之前在使用spring时，遇到问题直接百度/googole查询资料，有的时候找到资料的时候就借鉴使用了，也没有深究其中的原理。趁着ARTS的机会，阅读了一下spring5.0的官方文档。</p><ul><li>Spring Web MVC 的名字来源于spring项目中的第一个模块 spring-webmvc,更多被熟知为”Spring MVC”。</li><li>于Spring Web MVC并行的Spring WebFlux的web框架也是来源于源代码模块中的spring-webflux。</li><li>DispatcherServlet servlet分发器。它和其他的web框架一样，被设计为一个围绕前端控制器的一个主要的servlet，它为请求处理提供了分享算法，但是实际的工作是由委托的组建所完成，它相当于一个枢纽，当请求来了以后告诉这个请求应该谁去处理，然后当请求完成以后，应该交由那个模块进行解析。</li><li>DispatcherServlet的注册方式有两种，一种是使用java代码进行注册，一种是使用web.xml进行注册。</li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>这周在处理问题的时候，需要在将本地服务器的文件上传到其他的服务器上。<br>使用两种方式来处理文件的上传，一种是带有返回值的处理，二另一种只返回http请求状态码。</p><ul><li>带有返回值的文件上传</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 上传文件</span><br><span class="line">   * @param serverUrl 请求地址</span><br><span class="line">   * @param file      上传的文件</span><br><span class="line">   * @param params    参数</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static String uploadFileByPost(String serverUrl, File file,</span><br><span class="line">          Map&lt;String, String&gt; params) throws IOException &#123;</span><br><span class="line">      String respStr = null;</span><br><span class="line">      CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">      try &#123;</span><br><span class="line">          HttpPost httppost = new HttpPost(serverUrl);</span><br><span class="line">          // 获取bin文件</span><br><span class="line">          FileBody binFileBody = new FileBody(file);</span><br><span class="line">          MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder</span><br><span class="line">                  .create();</span><br><span class="line">          multipartEntityBuilder</span><br><span class="line">                  .setMode(HttpMultipartMode.BROWSER_COMPATIBLE);</span><br><span class="line">          multipartEntityBuilder.setCharset(Consts.UTF_8);</span><br><span class="line">          multipartEntityBuilder.addPart(file.getName(), binFileBody);</span><br><span class="line">          HttpEntity reqEntity = multipartEntityBuilder.build();</span><br><span class="line">          httppost.setEntity(reqEntity);</span><br><span class="line">          CloseableHttpResponse response = httpclient.execute(httppost);</span><br><span class="line">          HttpEntity resEntity = response.getEntity();</span><br><span class="line">          if (Objects.nonNull(resEntity)) &#123;</span><br><span class="line">              respStr = EntityUtils</span><br><span class="line">                      .toString(resEntity, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">              EntityUtils.consume(resEntity);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; catch (ClientProtocolException e) &#123;</span><br><span class="line">          logger.error(&quot;上传文件失败,client 协议异常&quot;);</span><br><span class="line">          throw e;</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">          logger.error(&quot;上传文件失败,IO异常&quot;);</span><br><span class="line">          throw e;</span><br><span class="line">      &#125; catch (NullPointerException ex) &#123;</span><br><span class="line">          logger.error(&quot;接口返回异常&quot;);</span><br><span class="line">          throw ex;</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              httpclient.close();</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              logger.error(&quot;关闭httpClient异常&quot;, e);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return respStr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只返回状态值的上传</p><pre><code>/**  * 上传文件使用httppost请求  * @param file 文件  * @param params 参数  * @return  */ public static int uploadByPost(String url, File file,         Map&lt;String, String&gt; params) {     PostMethod filePost = new PostMethod(url);     HttpClient client = new HttpClient();     if (Objects.nonNull(params)) {         params.forEach((k, v) -&gt; {             filePost.setParameter(k, v);         });     }     try {         Part[] parts = { new FilePart(file.getName(), file) };         filePost.setRequestEntity(                 new MultipartRequestEntity(parts, filePost.getParams()));         client.getHttpConnectionManager().getParams()                 .setConnectionTimeout(5000);         int status = client.executeMethod(filePost);         if (status == HttpStatus.SC_OK) {             logger.debug(&quot;上传文件成功!&quot;);         } else {             logger.debug(&quot;上传文件失败!&quot;);         }         return status;     } catch (FileNotFoundException e) {         logger.error(&quot;上传文件没有找到!&quot;, e);     } catch (HttpException e) {         logger.error(&quot;网络连接异常!&quot;, e);     } catch (IOException e) {         logger.error(&quot;IO 异常&quot;, e);     } finally {         filePost.releaseConnection();     }     return 0; }</code></pre><h4 id="share"><a href="#share" class="headerlink" title="share"></a>share</h4><p>很久以前的一个需求，需要在ueditor(1.3.6版本上)添加一个一键排版的功能，具体的思路是点击排版按钮的时候ueditor的选取文字按照一个固定的样式进行格式化。其实就是编写ueditor的一个过滤规则。具体可以参考：<a href="https://www.guoxiaohei.cn/2019/01/23/ueditor1-3-6-%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6-%E4%B8%80%E9%94%AE%E6%8E%92%E7%89%88/">ueditor1.3.6 扩展插件(一键排版)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;ARTS第一周&quot;&gt;&lt;a href=&quot;#ARTS第一周&quot; class=&quot;headerlink&quot; title=&quot;ARTS第一周&quot;&gt;&lt;/a&gt;ARTS第一周&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;每周完成一个ARTS： 每周至少做一个 leetcode 的算法题、阅读并点评至少一篇英文技术文章、学习至少一个技术技巧、分享一篇有观点和思考的技术文章。（也就是 Algorithm、Review、Tip、Share 简称ARTS）&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ARTS" scheme="https://www.guoxiaohei.cn/categories/ARTS/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里巴巴开发手册</title>
    <link href="https://www.guoxiaohei.cn/2019/02/20/alibaba-development-manual.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/20/alibaba-development-manual.html</id>
    <published>2019-02-20T13:31:57.000Z</published>
    <updated>2019-06-11T13:05:43.845Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><div class="row"><embed src="/pdf/阿里巴巴Java开发手册/阿里巴巴Java开发手册终极版v1.3.0.pdf" width="100%" height="550" type="application/pdf"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;/pdf/阿里巴巴Java开发手册/阿里巴巴Java开发手册终极版v1.3.0.pdf&quot; w
      
    
    </summary>
    
      <category term="books" scheme="https://www.guoxiaohei.cn/categories/books/"/>
    
    
  </entry>
  
  <entry>
    <title>【转载】CentOS7下安装chrome浏览器</title>
    <link href="https://www.guoxiaohei.cn/2019/02/17/install-chrome-browser-under-centos-7.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/17/install-chrome-browser-under-centos-7.html</id>
    <published>2019-02-17T12:30:50.000Z</published>
    <updated>2019-06-11T13:05:43.838Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/kali-linux.png" alt></p><p>Centos下安装chrome浏览器。</p><a id="more"></a><h4 id="从google官网下载google-chrome安装包"><a href="#从google官网下载google-chrome安装包" class="headerlink" title="从google官网下载google chrome安装包"></a>从<a href="http://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="noopener">google官网</a>下载google chrome安装包</h4><p>选择linux系统，并下载google-chrome-stable_current_x86_64.</p><h4 id="使用root权限进行安装"><a href="#使用root权限进行安装" class="headerlink" title="使用root权限进行安装"></a>使用root权限进行安装</h4><p><code>rpm -ivh google-chrome-stable_current_x86_64.rpm</code></p><h4 id="安装错误"><a href="#安装错误" class="headerlink" title="安装错误"></a>安装错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  错误：依赖检测失败：</span><br><span class="line">    lsb &gt;= 4.0 被 google-chrome-stable-54.0.2840.59-1.x86_64 需要</span><br><span class="line">    libXss.so.1()(64bit) 被 google-chrome-stable-54.0.2840.59-1.x86_64 需要</span><br></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install pax*</span><br><span class="line">yum install redhat-lsb*</span><br><span class="line">yum -y install libXss*</span><br></pre></td></tr></table></figure><h4 id="依赖检测失败"><a href="#依赖检测失败" class="headerlink" title="依赖检测失败"></a>依赖检测失败</h4><p><code>yum install libappindicato</code></p><h4 id="再次安装rpm软件包"><a href="#再次安装rpm软件包" class="headerlink" title="再次安装rpm软件包"></a>再次安装rpm软件包</h4><p><code>rpm -ivh google-chrome-stable_current_x86_64.rpm</code></p><figure class="highlight plain"><figcaption><span>################################# [100%]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正在升级/安装...</span><br><span class="line">   1:google-chrome-stable-54.0.2840.59################################# [100%]</span><br></pre></td></tr></table></figure><p>至此，google chrome安装成功！此时应用程序中已经有Google Chrome标志啦！</p><p><strong>ps:</strong> chrome默认是不能给root用户运行的。右击打开属性在命令后面加上下面内容</p><p><code>--no-sandbox</code></p><p>原文:<a href="https://blog.csdn.net/gejian1208/article/details/80605391" target="_blank" rel="noopener">CentOS7下安装chrome浏览器</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/kali-linux.png&quot; alt&gt;&lt;/p&gt;&lt;p&gt;Centos下安装chrome浏览器。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【转载】CentOS 7 下安装Lantern（VPN）</title>
    <link href="https://www.guoxiaohei.cn/2019/02/17/install-lantern-(vpn)-under-centos-7.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/17/install-lantern-(vpn)-under-centos-7.html</id>
    <published>2019-02-17T11:04:00.000Z</published>
    <updated>2019-06-11T13:05:43.837Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p>在实际的开发过程中，当我们遇到难题时，往往会询问“度娘”来解决问题。但是“度娘”的答案有的时候并不是尽善尽美。这个时候我们通过google来寻找答案。使用google搜索需要翻墙，故使用了lantern这个软件。lantern支持windows、Android以及Ubuntu系统，我本机安装的是Centos7，下面介绍如果在Centos上安装lantern。</p><a id="more"></a><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>使用alien将Ubuntu的deb包转成rpm安装。</p><h4 id="结果图"><a href="#结果图" class="headerlink" title="结果图"></a>结果图</h4><p><img src="/images/lantern/lantern01.jpg" alt></p><h4 id="安装必备的软件alien"><a href="#安装必备的软件alien" class="headerlink" title="安装必备的软件alien"></a>安装必备的软件alien</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install epel-release</span><br><span class="line"># rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line"># rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="下载ubuntn的deb包。"><a href="#下载ubuntn的deb包。" class="headerlink" title="下载ubuntn的deb包。"></a>下载ubuntn的deb包。</h4><p><a href="https://github.com/getlantern/lantern/releases/tag/latest" target="_blank" rel="noopener">下载地址</a></p><h4 id="转化成rpm包"><a href="#转化成rpm包" class="headerlink" title="转化成rpm包"></a>转化成rpm包</h4><p><code>sudo alien -r lantern-installer-64-bit.deb</code></p><p>此时会出现：<code>Get Error:“conflicts with file from package filesystem”</code></p><p><strong>ps:</strong> 我在实际操作时，没有遇到，直接转换成功。</p><h4 id="安装rpmrebuild"><a href="#安装rpmrebuild" class="headerlink" title="安装rpmrebuild"></a>安装rpmrebuild</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install rpmrebuild</span><br><span class="line">sudo rpmrebuild -pe lantern-4.0.1-2.x86_64.rpm</span><br></pre></td></tr></table></figure><p><strong>ps:</strong> <code>lantern-4.0.1-2.x86_64.rpm</code> 这个是转换成功的rpm包。</p><h4 id="替换文件-把里面的内容替换成下面的，大约在中间部位"><a href="#替换文件-把里面的内容替换成下面的，大约在中间部位" class="headerlink" title="替换文件(把里面的内容替换成下面的，大约在中间部位)"></a>替换文件(把里面的内容替换成下面的，大约在中间部位)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(Converted from a deb package by alien version 8.95.)</span><br><span class="line">%files</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/bin&quot;</span><br><span class="line">%attr(0777, root, root) &quot;/usr/bin/lantern&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/lib&quot;</span><br><span class="line">%dir %attr(0755, root, root) &quot;/usr/lib/lantern&quot;</span><br><span class="line">%attr(0644, root, root) &quot;/usr/lib/lantern/.packaged-lantern.yaml&quot;</span><br><span class="line">%attr(0644, root, root) &quot;/usr/lib/lantern/lantern-binary&quot;</span><br><span class="line">%attr(0755, root, root) &quot;/usr/lib/lantern/lantern.sh&quot;</span><br><span class="line">%attr(0644, root, root) &quot;/usr/lib/lantern/lantern.yaml&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/applications&quot;</span><br><span class="line">%attr(0644, root, root) &quot;/usr/share/applications/lantern.desktop&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/doc&quot;</span><br><span class="line">%dir %attr(0755, root, root) &quot;/usr/share/doc/lantern&quot;</span><br><span class="line">%doc %attr(0644, root, root) &quot;/usr/share/doc/lantern/changelog.gz&quot;</span><br><span class="line">%doc %attr(0644, root, root) &quot;/usr/share/doc/lantern/copyright&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/icons&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/icons/hicolor&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/icons/hicolor/128x128&quot;</span><br><span class="line">#%dir %attr(0755, root, root) &quot;/usr/share/icons/hicolor/128x128/apps&quot;</span><br><span class="line">%attr(0644, root, root) &quot;/usr/share/icons/hicolor/128x128/apps/lantern.png&quot;</span><br><span class="line">%changelog</span><br></pre></td></tr></table></figure><p>以上替换文件是执行了<code>sudo rpmrebuild -pe lantern-4.0.1-2.x86_64.rpm</code> 重新构建了rpm包时，替换的。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>sudo rpm -i /root/rpmbuild/RPMS/x86_64/lantern-4.0.1-2.x86_64.rpm</code></p><p><code>lantern-4.0.1-2.x86_64.rpm</code> 这个rpm包时重新构建生成的。</p><h4 id="会出现错误-实际安装的时候，暂时没有遇到过"><a href="#会出现错误-实际安装的时候，暂时没有遇到过" class="headerlink" title="会出现错误(实际安装的时候，暂时没有遇到过)"></a>会出现错误(实际安装的时候，暂时没有遇到过)</h4><p><code>sudo yum install libappindicator-gtk3</code></p><h4 id="复制sh文件到根目录"><a href="#复制sh文件到根目录" class="headerlink" title="复制sh文件到根目录"></a>复制sh文件到根目录</h4><p><code>cp /usr/lib/lantern/lantern.sh ~./lantern.sh</code></p><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">把/usr/lib/lantern/lantern.sh  </span><br><span class="line"></span><br><span class="line">添加进去就可以了，保存退出。</span><br></pre></td></tr></table></figure><p><strong>ps:</strong> 在实际操作的时候，不要着急，仔细完成每个步骤，相信就会成功。</p><p>原文：<a href="https://segmentfault.com/a/1190000013278021?utm_source=channel-hottest/*&amp;^%$" target="_blank" rel="noopener">CentOS 7 下安装Lantern（VPN）</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在实际的开发过程中，当我们遇到难题时，往往会询问“度娘”来解决问题。但是“度娘”的答案有的时候并不是尽善尽美。这个时候我们通过google来寻找答案。使用google搜索需要翻墙，故使用了lantern这个软件。lantern支持windows、Android以及Ubuntu系统，我本机安装的是Centos7，下面介绍如果在Centos上安装lantern。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.guoxiaohei.cn/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://www.guoxiaohei.cn/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>【装载】centos 7 安装 恢复windows引导项</title>
    <link href="https://www.guoxiaohei.cn/2019/02/17/centos-7-installation-restores-windows-boot-item.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/17/centos-7-installation-restores-windows-boot-item.html</id>
    <published>2019-02-17T09:50:20.000Z</published>
    <updated>2019-06-11T13:05:43.837Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p>在电脑Windows10系统上安装Centos7，安装后找不到Windows7引导菜单。<br>原因是CentOS 7已采用新式的grub2系统，所以需要进入/boot/grub2目录后使用vi编辑grub.cfg文件。</p><a id="more"></a><h4 id="解决方法一：修改Centos-7的Grub2引导，添加Windows的启动项"><a href="#解决方法一：修改Centos-7的Grub2引导，添加Windows的启动项" class="headerlink" title="解决方法一：修改Centos 7的Grub2引导，添加Windows的启动项"></a>解决方法一：修改Centos 7的Grub2引导，添加Windows的启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.sudo vi /boot/grub2/grub.cfg</span><br><span class="line">2.找到 ### BEGIN /etc/grub.d/30_os-prober ###</span><br><span class="line">   在后面添加</span><br><span class="line">   menuentry &quot;Windows 10 (loader) (on /dev/sda1)&quot; &#123;</span><br><span class="line">     insmod ntfs</span><br><span class="line">     set root=(hd0,1) #由于我的windows安装在硬盘的C盘，故（hd0,1)</span><br><span class="line">     chainloader +1</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="系统自动检测是否有其他系统"><a href="#系统自动检测是否有其他系统" class="headerlink" title="系统自动检测是否有其他系统"></a>系统自动检测是否有其他系统</h4><p><code>grub2-mkconfig -o /boot/grub2/grub.cfg `</code></p><p>Linux只能认识Ext3/4，fat32格式，如果Windows是NTFS格式磁盘分区，Grub2将无法识别。</p><p>步骤如下:</p><ul><li>安装epel-release.noarch:</li></ul><p><code>yum install epel-release.noarch</code></p><ul><li><p>安装ntfs-3g用于识别ntfs分区<br><code>yum install ntfs-3g</code></p></li><li><p>重新生成引导项<br><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></p></li><li><p>重新启动系统。</p></li></ul><p>原文：<a href="http://www.cnblogs.com/duzishanglu/p/4687958.html安装centos后无法引导启动windows7的解决方法" target="_blank" rel="noopener">安装centos后无法引导启动windows7的解决方法</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在电脑Windows10系统上安装Centos7，安装后找不到Windows7引导菜单。&lt;br&gt;原因是CentOS 7已采用新式的grub2系统，所以需要进入/boot/grub2目录后使用vi编辑grub.cfg文件。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://www.guoxiaohei.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://www.guoxiaohei.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SourceTree 免登录跳过初始设置（转载）</title>
    <link href="https://www.guoxiaohei.cn/2019/02/16/sourcetree-logon-free-skip-initial-settings-(reprint).html"/>
    <id>https://www.guoxiaohei.cn/2019/02/16/sourcetree-logon-free-skip-initial-settings-(reprint).html</id>
    <published>2019-02-16T00:24:00.000Z</published>
    <updated>2019-06-11T13:05:43.825Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p>使用git的时候，有很多的界面管理工具，下面推荐一个比较好用git管理工具——SourceTree.</p><a id="more"></a><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree官网</a></p><h4 id="SourceTree免登陆的方法"><a href="#SourceTree免登陆的方法" class="headerlink" title="SourceTree免登陆的方法"></a>SourceTree免登陆的方法</h4><p><img src="/images/git/sourceTree.png" alt></p><p>SourceTree 安装之后需要使用账号登陆以授权，以前是可以不登陆的，但是现在是强制登陆。</p><p>虽然是免费授权，但是碰上不可抗力因素，登陆不是很方便，这里记录一下跳过这个初始化的步骤。</p><h5 id="新建accounts-json文件"><a href="#新建accounts-json文件" class="headerlink" title="新建accounts.json文件"></a>新建accounts.json文件</h5><p><code>%LocalAppData%\Atlassian\SourceTree\</code></p><p>找到以上目录，查看是否存在<code>accounts.json</code>文件，如果不存在则新建。文件的内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"$id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity"</span>,</span><br><span class="line">    <span class="attr">"Authenticate"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"HostInstance"</span>: &#123;</span><br><span class="line">      <span class="attr">"$id"</span>: <span class="string">"2"</span>,</span><br><span class="line">      <span class="attr">"$type"</span>: <span class="string">"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount"</span>,</span><br><span class="line">      <span class="attr">"Host"</span>: &#123;</span><br><span class="line">        <span class="attr">"$id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"$type"</span>: <span class="string">"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount"</span>,</span><br><span class="line">        <span class="attr">"Id"</span>: <span class="string">"atlassian account"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"BaseUrl"</span>: <span class="string">"https://id.atlassian.com/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Credentials"</span>: &#123;</span><br><span class="line">      <span class="attr">"$id"</span>: <span class="string">"4"</span>,</span><br><span class="line">      <span class="attr">"$type"</span>: <span class="string">"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account"</span>,</span><br><span class="line">      <span class="attr">"Username"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Email"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"IsDefault"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>文章来源:<a href="https://www.cnblogs.com/xiofee/p/sourcetree_pass_initialization_setup.html" target="_blank" rel="noopener">SourceTree 免登录跳过初始设置</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;使用git的时候，有很多的界面管理工具，下面推荐一个比较好用git管理工具——SourceTree.&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://www.guoxiaohei.cn/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>转载：Java 获取Linux 的IP地址</title>
    <link href="https://www.guoxiaohei.cn/2019/02/03/reprint:-java-gets-the-ip-address-of-linux.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/03/reprint:-java-gets-the-ip-address-of-linux.html</id>
    <published>2019-02-03T09:09:00.000Z</published>
    <updated>2019-06-11T13:05:43.844Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28875230&auto=0&height=66"></iframe><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在java web项目中，我们总会有获取服务器ip地址的需求，下面给出获取操作系统ip地址方法。</p><a id="more"></a><h4 id="实际编码"><a href="#实际编码" class="headerlink" title="实际编码"></a>实际编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">package com.xx.utils;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.NetworkInterface;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Description:</span><br><span class="line"> *</span><br><span class="line"> * @author guoyupeng [2018/7/18]</span><br><span class="line"> */</span><br><span class="line">public final class WebToolUtils &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 系统os为windows的标志</span><br><span class="line">     */</span><br><span class="line">    private static final String OS_WINDOWS = &quot;windows&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取客户端ip 不知道的ip地址</span><br><span class="line">     */</span><br><span class="line">    private static final String UNKNOWN_IP = &quot;unknown&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * logger</span><br><span class="line">     */</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(WebToolUtils.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取本地ip地址</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getLoacalIp() throws UnknownHostException, SocketException &#123;</span><br><span class="line">        if (isWindowsOs()) &#123;</span><br><span class="line">            return getLocalHostName();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return getLinuxLocalIp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否windows系统</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isWindowsOs() &#123;</span><br><span class="line">        boolean isWindows = false;</span><br><span class="line">        String osName = System.getProperty(&quot;os.name&quot;);</span><br><span class="line">        if (osName.toLowerCase().indexOf(OS_WINDOWS) &gt; -1) &#123;</span><br><span class="line">            isWindows = true;</span><br><span class="line">        &#125;</span><br><span class="line">        return isWindows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取本机ip地址</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @throws UnknownHostException 不知道的主机名称异常</span><br><span class="line">     */</span><br><span class="line">    public static String getLocalHostName() throws UnknownHostException &#123;</span><br><span class="line">        return InetAddress.getLocalHost().getHostName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取Linux下的IP地址</span><br><span class="line">     *</span><br><span class="line">     * @return IP地址</span><br><span class="line">     * @throws SocketException</span><br><span class="line">     */</span><br><span class="line">    private static String getLinuxLocalIp() throws SocketException &#123;</span><br><span class="line">        String ip = &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en</span><br><span class="line">                    .hasMoreElements(); ) &#123;</span><br><span class="line">                NetworkInterface intf = en.nextElement();</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                if (!name.contains(&quot;docker&quot;) &amp;&amp; !name.contains(&quot;lo&quot;)) &#123;</span><br><span class="line">                    for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr</span><br><span class="line">                            .hasMoreElements(); ) &#123;</span><br><span class="line">                        InetAddress inetAddress = enumIpAddr.nextElement();</span><br><span class="line">                        if (!inetAddress.isLoopbackAddress()) &#123;</span><br><span class="line">                            String ipAddress = inetAddress.getHostAddress().toString();</span><br><span class="line">                            if (!ipAddress.contains(&quot;::&quot;) &amp;&amp; !ipAddress.contains(&quot;0:0:&quot;)</span><br><span class="line">                                    &amp;&amp; !ipAddress.contains(&quot;fe80&quot;)) &#123;</span><br><span class="line">                                ip = ipAddress;</span><br><span class="line">                                logger.debug(&quot;ip地址为：&#123;&#125;&quot;, ipAddress);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SocketException ex) &#123;</span><br><span class="line">            logger.error(&quot;获取ip地址异常&quot;, ex.getMessage());</span><br><span class="line">            ip = &quot;127.0.0.1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户真实IP地址，不使用request.getRemoteAddr();的原因是有可能用户使用了代理软件方式避免真实IP地址,</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值，究竟哪个才是真正的用户端的真实IP呢？</span><br><span class="line">     * 答案是取X-Forwarded-For中第一个非unknown的有效IP字符串。</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 如：X-Forwarded-For：192.168.1.110, 192.168.1.120, 192.168.1.130,</span><br><span class="line">     * 192.168.1.100</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 用户真实IP为： 192.168.1.110</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getIpAddress(HttpServletRequest request) &#123;</span><br><span class="line">        String ip = request.getHeader(&quot;x-forwarded-for&quot;);</span><br><span class="line">        if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;Proxy-Client-IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;HTTP_CLIENT_IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://www.cnblogs.com/raphael5200/p/5996464.html" target="_blank" rel="noopener">Java 获取Linux 的IP地址</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28875230&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在java web项目中，我们总会有获取服务器ip地址的需求，下面给出获取操作系统ip地址方法。&lt;/p&gt;
    
    </summary>
    
      <category term="java web" scheme="https://www.guoxiaohei.cn/categories/java-web/"/>
    
    
  </entry>
  
  <entry>
    <title>转载:关于fastjson的@JSONField注解的一些问题(详解)</title>
    <link href="https://www.guoxiaohei.cn/2019/02/02/reprint:-some-questions-about-the-@jsonfield-annotation-of-fastjson-(detailed).html"/>
    <id>https://www.guoxiaohei.cn/2019/02/02/reprint:-some-questions-about-the-@jsonfield-annotation-of-fastjson-(detailed).html</id>
    <published>2019-02-02T11:32:00.000Z</published>
    <updated>2019-06-11T13:05:43.843Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在<code>java web</code>项目中，我们接受的前台参数和后台定义的参数不一致的时候，需要我们将字段进行转换，<code>fastjson</code>中有一个<code>@JsonField</code>注解，能够将字段属性和数据库列进行转换。下面说明一下关于<code>fastjson</code>中<code>@JSONFiled</code>注解的一些问题。</p><a id="more"></a><h4 id="关于fastjson的-JSONField注解的一些问题-详解"><a href="#关于fastjson的-JSONField注解的一些问题-详解" class="headerlink" title="关于fastjson的@JSONField注解的一些问题(详解)"></a>关于fastjson的@JSONField注解的一些问题(详解)</h4><p><code>@JSONField</code> 看源码它可以作用于字段和方法上。</p><h5 id="作用Field"><a href="#作用Field" class="headerlink" title="作用Field"></a>作用Field</h5><p><code>@JSONField</code>作用在<code>Field</code>时，其<code>name</code>不仅定义了输入key的名称，同时也定义了输出的名称。</p><p>但是我在使用中，发现并不如上所说。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(name=<span class="string">"project_id"</span>) <span class="keyword">private</span> Long ProjectID</span><br></pre></td></tr></table></figure><p></p><p>发现<code>bean</code> 转<code>json</code>的时候并是<code>&quot;project_id&quot;:xxx</code>的形式，<code>json</code>转<code>bean</code>的时候也不会把<code>&quot;project_id&quot;:xx</code>的内容设置到<code>ProjectID</code>的里面。对应的fastjson的版本是1.1.15。</p><h5 id="作用在setter和getter方法上-这种方式倒是在使用的过程当中符合期望。"><a href="#作用在setter和getter方法上-这种方式倒是在使用的过程当中符合期望。" class="headerlink" title="作用在setter和getter方法上 这种方式倒是在使用的过程当中符合期望。"></a>作用在setter和getter方法上 这种方式倒是在使用的过程当中符合期望。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**bean 转json 时会把bean中的ProjectID转换为project_id */</span></span><br><span class="line">  <span class="meta">@JSONField</span>(name=<span class="string">"project_id"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getProjectID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ProjectID;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**json 转bean 时会把json中的project_id值赋值给projectID*/</span></span><br><span class="line">  <span class="meta">@JSONField</span>(name=<span class="string">"project_id"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProjectID</span><span class="params">(Long projectID)</span> </span>&#123;</span><br><span class="line">    ProjectID = projectID;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="JSONField其它用法"><a href="#JSONField其它用法" class="headerlink" title="@JSONField其它用法"></a>@JSONField其它用法</h5><p>查看@JSONField注解的源码，除了name可用之外，还有format，serialize，deserialize，serialzeFeatures，parseFeatures可用。</p><ul><li>format，貌似用在Date类型的字段来格式化时间格式比较有用。</li><li>serialize和deserialize是布尔类型的，用法为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(serialize=<span class="keyword">false</span>) </span><br><span class="line"><span class="keyword">private</span> Long ProjectID</span><br></pre></td></tr></table></figure><p>就是在序列化的时候就不包含这个字段了。deserialize与之相反。但是有一点需要注意，我看其它地方说，当字段为final的时候注解放在字段上是不起作用的，这时候应该放在get<br>或set方法上。</p><ul><li>serialzeFeatures.<br>我用到这个属性，fastjson默认的序列化规则是当你的字段的值为null的时候，它是不会给你序列化这个字段的，例如我有一个这样的需求。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"fieldName"</span>:<span class="string">"project_id"</span>,<span class="attr">"operator"</span>:<span class="string">"is not"</span>,<span class="attr">"value"</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p>一个对象序列化成这样，我的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CriteriaVO criteriaVO = <span class="keyword">new</span> CriteriaVO();</span><br><span class="line">   criteriaVO.setFieldName(<span class="string">"project_id"</span>);</span><br><span class="line">   criteriaVO.setOperator(<span class="string">"is not"</span>);</span><br><span class="line">   criteriaVO.setValue(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>默认的它只会序列化为如下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"fieldName"</span>:<span class="string">"project_id"</span>,<span class="attr">"operator"</span>:<span class="string">"is not"</span>&#125;</span><br></pre></td></tr></table></figure><p>当然fastjson还是允许你控制一下序列化的规则的。</p><p>这就用到了SerializerFeature，这个一个枚举，里面有好几个值 ，具体的含义大家有兴趣的可以了解一下,我只是用到了其中一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(serialzeFeatures=SerializerFeature.WriteMapNullValue)</span><br><span class="line"><span class="keyword">private</span> String value;</span><br></pre></td></tr></table></figure><p>这样当value的值为null的时候，依然会把它的值序列化出来。也就是下面的样子，这就是我想要的结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"fieldName":"project_id","operator":"is not","value":null&#125;`</span><br></pre></td></tr></table></figure><p>又遇到了另一个问题，当字段类型为int类型时，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br></pre></td></tr></table></figure><p>我如果不set值的时候，会序列化为下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"limit"</span>:<span class="number">0</span>,<span class="string">"start"</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>默认为都是0了，而我的目标是如果不设置值的时候，它们不会出现。</p><p>我是简单地通过把他们的类型改为Integer了。应该有其它通过自定义序列化行为的方式来解决，暂不研究。</p><p>原文转载: <a href="https://www.jb51.net/article/105906.htm" target="_blank" rel="noopener">关于fastjson的@JSONField注解的一些问题(详解)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;java web&lt;/code&gt;项目中，我们接受的前台参数和后台定义的参数不一致的时候，需要我们将字段进行转换，&lt;code&gt;fastjson&lt;/code&gt;中有一个&lt;code&gt;@JsonField&lt;/code&gt;注解，能够将字段属性和数据库列进行转换。下面说明一下关于&lt;code&gt;fastjson&lt;/code&gt;中&lt;code&gt;@JSONFiled&lt;/code&gt;注解的一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="java web" scheme="https://www.guoxiaohei.cn/categories/java-web/"/>
    
    
  </entry>
  
  <entry>
    <title>转载：几种copyProperties工具类性能比较</title>
    <link href="https://www.guoxiaohei.cn/2019/02/02/reprint:-performance-comparison-of-several-copyproperties-tooling-classes.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/02/reprint:-performance-comparison-of-several-copyproperties-tooling-classes.html</id>
    <published>2019-02-02T10:23:00.000Z</published>
    <updated>2019-06-11T13:05:43.844Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在<code>coding</code>过程中，难免遇到对象的属性复制，往往我们想到的都是使用<code>apahce</code>的<code>BeanUtils</code>的<code>corpProperties</code>来进行复制，但是它的性能并不仅人意。下面我们来看下几种<code>copyProperties</code>工具类的性能比较。</p><a id="more"></a><h4 id="市面上的其他几种属性copy工具"><a href="#市面上的其他几种属性copy工具" class="headerlink" title="市面上的其他几种属性copy工具"></a>市面上的其他几种属性copy工具</h4><ul><li>springframework的BeanUtils</li><li>cglib的BeanCopier</li><li>Apache BeanUtils包的PropertyUtils类</li></ul><p>由于apache BeanUtils的性能存在问题</p><p>所以使用上面的集中工具来代替</p><table><thead><tr><th>工具名称</th><th>执行1000次耗时</th><th>10000次</th><th>100000次</th><th>10000000次</th></tr></thead><tbody><tr><td>Apache BeanUtils</td><td>390ms</td><td>854ms</td><td>1763ms</td><td>8408ms</td></tr><tr><td>Apache PropertyUtils</td><td>26ms</td><td>221ms</td><td>352ms</td><td>2663ms</td></tr><tr><td>spring BeanUtils</td><td>39ms</td><td>315ms</td><td>373ms</td><td>949ms</td></tr><tr><td>Cglib BeanCopier</td><td>64ms</td><td>144ms</td><td>171ms</td><td>309ms</td></tr></tbody></table><h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><ol><li>Apache BeanUtils的性能最差,不建议使用。</li><li>Apache PropertyUtils100000次以内性能还能接受,到百万级别性能就比较差了,可酌情考虑。</li><li>spring BeanUtils和BeanCopier性能较好,如果对性能有特别要求,可使用BeanCopier,不然spring BeanUtils也是可取的。</li></ol><p>详细的解析过程请到远文章查看:<a href="https://www.jianshu.com/p/bcbacab3b89e" target="_blank" rel="noopener">几种copyProperties工具类性能比较</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;coding&lt;/code&gt;过程中，难免遇到对象的属性复制，往往我们想到的都是使用&lt;code&gt;apahce&lt;/code&gt;的&lt;code&gt;BeanUtils&lt;/code&gt;的&lt;code&gt;corpProperties&lt;/code&gt;来进行复制，但是它的性能并不仅人意。下面我们来看下几种&lt;code&gt;copyProperties&lt;/code&gt;工具类的性能比较。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具类" scheme="https://www.guoxiaohei.cn/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="copyProperties" scheme="https://www.guoxiaohei.cn/tags/copyProperties/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Spring Boot中使用Swagger2构建强大的RESTful API文档</title>
    <link href="https://www.guoxiaohei.cn/2019/02/02/%5Breprint%5D-spring-boot-uses-swagger-2-to-build-powerful-restful-api-documents.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/02/[reprint]-spring-boot-uses-swagger-2-to-build-powerful-restful-api-documents.html</id>
    <published>2019-02-02T10:02:00.000Z</published>
    <updated>2019-06-11T13:05:43.838Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/spring.jpg" alt></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Swagger是一个Restful风格接口的文档在线自动生成和测试的框架。下面引入swagger官网的一句话。</p><blockquote><p>Swagger UI allows anyone — be it your development team or your end consumers — to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.</p></blockquote><a id="more"></a><h4 id="swagger-官网"><a href="#swagger-官网" class="headerlink" title="swagger 官网"></a>swagger 官网</h4><p><a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">官网地址</a></p><h4 id="使用Spring-Boot中使用Swagger2构建RESTful-API"><a href="#使用Spring-Boot中使用Swagger2构建RESTful-API" class="headerlink" title="使用Spring Boot中使用Swagger2构建RESTful API."></a>使用Spring Boot中使用Swagger2构建RESTful API.</h4><p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。</p><p>这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p><p>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。<br>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。<br>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示</p><p><img src="/images/Spring Boot中使用Swagger2构建强大的RESTful API文档/swagger2_1.png" alt></p><p>下面来具体介绍，如果在Spring Boot中使用Swagger2。首先，我们需要一个Spring Boot实现的RESTful API工程，若您没有做过这类内容，建议先阅读</p><p><a href="http://blog.didispace.com/springbootrestfulapi/" target="_blank" rel="noopener">Spring Boot构建RESTful API与单元测试</a></p><h5 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h5><p>在<code>pom.xml</code>中加入<code>Swagger2</code>的依赖<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h5 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h5><p>在<code>Application.java</code>同级创建<code>Swagger2</code>的配置类<code>Swagger2</code>。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"更多Spring Boot相关文章请关注：http://blog.didispace.com/"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://blog.didispace.com/"</span>)</span><br><span class="line">                .contact(<span class="string">"程序猿DD"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如上代码所示，通过<code>@Configuration</code>注解，让<code>Spring</code>来加载该类配置。再通过<code>@EnableSwagger2</code>注解来启用<code>Swagger2</code>。</p><p>再通过<code>createRestApi</code>函数创建<code>Docket</code>的<code>Bean</code>之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。<code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给<code>Swagger</code>来展现，本例采用指定扫描的包路径来定义，<code>Swagger</code>会扫描该包下所有<code>Controller</code>定义的<code>API</code>，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上述代码添加上，启动<code>Spring Boot</code>程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。</p><p><img src="/images/Spring Boot中使用Swagger2构建强大的RESTful API文档/swagger2_2.png" alt></p><h5 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h5><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p><p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p><p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p><p>转载：<a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">Spring Boot中使用Swagger2构建强大的RESTful API文档</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/spring.jpg&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;Swagger是一个Restful风格接口的文档在线自动生成和测试的框架。下面引入swagger官网的一句话。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Swagger UI allows anyone — be it your development team or your end consumers — to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java web" scheme="https://www.guoxiaohei.cn/categories/java-web/"/>
    
    
      <category term="sprintboot" scheme="https://www.guoxiaohei.cn/tags/sprintboot/"/>
    
      <category term="swagger" scheme="https://www.guoxiaohei.cn/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0版本构建单元测试</title>
    <link href="https://www.guoxiaohei.cn/2019/02/02/springboot-version-2.0-builds-unit-tests.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/02/springboot-version-2.0-builds-unit-tests.html</id>
    <published>2019-02-02T09:48:00.000Z</published>
    <updated>2019-06-11T13:05:43.833Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/spring.jpg" alt></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们在coding的时候，都要对自己的coding进行测试，而对于开发有效的测试不外乎是单元测试了。以往的单元测试我们通过加载配置文件进行测试，但是这样相当于启动了整个项目，于是出现了mock的测试方式。对于mock测试优缺点，可以参考这篇文章——<a href="https://blog.csdn.net/weixin_42343424/article/details/80564365" target="_blank" rel="noopener"><br>Mock测试-优缺点分析</a>。下面我来介绍下springboot2.0采用mock测试的方法。</p><a id="more"></a><h4 id="使用mock的形式测试controller"><a href="#使用mock的形式测试controller" class="headerlink" title="使用mock的形式测试controller"></a>使用mock的形式测试controller</h4><ul><li>带参数的接口</li></ul><p>以下为demo代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guoyupeng.restapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guoyupeng.response.ResponseObject;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: restful controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guoyupeng [2018/11/29]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"rest api demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api demo</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"rest api demo"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(value = <span class="string">"params"</span>, name = <span class="string">"params"</span>, required = <span class="keyword">false</span>)&#125;)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"v1/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseObject <span class="title">apiDemo</span><span class="params">(@RequestParam(name = <span class="string">"params"</span>, required = <span class="keyword">false</span>)</span> String params) </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"rest api demo"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseObject(<span class="string">"rest api demo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rest api log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(RestApi.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>带参数的接口</li></ul><p>下面编写两个方法分别测试传入参数testApiDemoWithParams和没有参数apiDemoNoParam的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guoyupeng.restapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mock.web.MockServletContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.web.WebAppConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MvcResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: rest api demo test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guoyupeng [2018/11/29]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = MockServletContext.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单元测试启动初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> RestApi()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试api demo 不传入参数的形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apiDemoNoParam</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//第一种无参的方式</span></span><br><span class="line">        RequestBuilder requestBuilder = <span class="keyword">null</span>;</span><br><span class="line">        requestBuilder = MockMvcRequestBuilders.get(<span class="string">"/api/v1/demo"</span>);</span><br><span class="line">        mockMvc.perform(requestBuilder).andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().json(<span class="string">"&#123;\"message\":\"rest api demo\"&#125;"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种无参的方式</span></span><br><span class="line">        MvcResult mvcResult = mockMvc.perform(requestBuilder).andReturn();</span><br><span class="line">        <span class="keyword">int</span> status = mvcResult.getResponse().getStatus();</span><br><span class="line">        String resultContent = mvcResult.getResponse().getContentAsString();</span><br><span class="line">        Assert.assertEquals(status, <span class="number">200</span>);</span><br><span class="line">        Assert.assertEquals(resultContent, <span class="string">"&#123;\"message\":\"rest api demo\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入参数的demo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testApiDemoWithParams</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        MockHttpServletRequestBuilder requestBuilder = <span class="keyword">null</span>;</span><br><span class="line">        requestBuilder = get(<span class="string">"/api/v1/demo"</span>).param(<span class="string">"param"</span>,<span class="string">"111"</span>);</span><br><span class="line">        MvcResult result = mockMvc.perform(requestBuilder).andReturn();</span><br><span class="line">        <span class="keyword">int</span> status = result.getResponse().getStatus();</span><br><span class="line">        String resultJson = result.getResponse().getContentAsString();</span><br><span class="line">        Assert.assertEquals(status, <span class="number">200</span>);</span><br><span class="line">        Assert.assertEquals(resultJson, <span class="string">"&#123;\"message\":\"rest api demo\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ps</strong> 以上代码是我实际测试过的，欢迎大家积极吐槽。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/spring.jpg&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们在coding的时候，都要对自己的coding进行测试，而对于开发有效的测试不外乎是单元测试了。以往的单元测试我们通过加载配置文件进行测试，但是这样相当于启动了整个项目，于是出现了mock的测试方式。对于mock测试优缺点，可以参考这篇文章——&lt;a href=&quot;https://blog.csdn.net/weixin_42343424/article/details/80564365&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;Mock测试-优缺点分析&lt;/a&gt;。下面我来介绍下springboot2.0采用mock测试的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://www.guoxiaohei.cn/tags/springboot/"/>
    
      <category term="单元测试" scheme="https://www.guoxiaohei.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>编码——隐匿在计算机软硬件背后的语言上</title>
    <link href="https://www.guoxiaohei.cn/2019/02/01/coding---hidden-in-the-language-behind-computer-software-and-hardware.html"/>
    <id>https://www.guoxiaohei.cn/2019/02/01/coding---hidden-in-the-language-behind-computer-software-and-hardware.html</id>
    <published>2019-02-01T11:25:19.000Z</published>
    <updated>2019-06-11T13:05:43.843Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><div class="row"><embed src="/pdf/编码——隐匿在计算机软硬件背后的语言上/编码——隐匿在计算机软硬件背后的语言上.pdf" width="100%" height="550" type="application/pdf"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;/pdf/编码——隐匿在计算机软硬件背后的语言上/编码——隐匿在计算机软硬件背后的语言上.p
      
    
    </summary>
    
      <category term="books" scheme="https://www.guoxiaohei.cn/categories/books/"/>
    
    
  </entry>
  
  <entry>
    <title>tomcat6优化配置</title>
    <link href="https://www.guoxiaohei.cn/2019/01/30/tomcat-6-optimal-configuration.html"/>
    <id>https://www.guoxiaohei.cn/2019/01/30/tomcat-6-optimal-configuration.html</id>
    <published>2019-01-30T00:32:00.000Z</published>
    <updated>2019-06-11T13:05:43.834Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/tomcat.jpg" alt></p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>为什么要对tomcat进行优化？tomcat下载的时候的默认配置并不能满足生产环境的要求，这个时候就需要我们根据生产环境的配置对tomcat进行相应的优化。下面介绍的只是对tomcat6优化的配置，如果有问题的地方，请指出，谢谢。</p><a id="more"></a><h4 id="优化的方向"><a href="#优化的方向" class="headerlink" title="优化的方向"></a>优化的方向</h4><ul><li><p>JVM内存优化</p><p>1.备份tomcat/bin/catalina.bat文件<br>2.修改catalina.bat文件，在文件的上方添加一下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_OPTS=%JAVA_OPTS% -server -Xms1024m -Xmx1024m -XX:PermSize=64M -XX:MaxPermSize=128m -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:D:\Tomcat\apache-tomcat-6.0.29\logs\gc.log</span><br></pre></td></tr></table></figure></li></ul><p>如果想要生成堆栈日志需要添加一下内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  JAVA_OPTS="%JAVA_OPTS% -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=日志路径"</span><br><span class="line">JAVA_OPTS="%JAVA_OPTS% -XX:ErrorFile=日志路径/hs_err_pid%p.log"</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><p><code>-Xms1024m -Xmx1024m</code> 的数值要保持一致。具体的内存值根据服务器的配置进行修改。<br><code>-Xloggc:</code>配置的是jvm虚拟机gc的日志。<br><code>-XX:PermSize=128M</code> 一般配置成初始物理内存的1/64<br><code>-XX:MaxPermSize=256M</code> 一般配置成物理内存的1/4</p><ul><li><p>tomcat配置优化<br>打开tomcat/conf目录 将server.xml文件进行备份,修改server.xml文件，添加如下内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span>     <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>找到<code>Connector</code>标签 修改<code>Connector</code>的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//上面添加的Executor节点</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">acceptCount</span>=<span class="string">"700"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">maxThreads</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">enableLookups</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>acceptCount</code>容许的最大连接数<br><code>minSpareThreads</code>Tomcat初始化时创建的 socket线程数<br><code>maxSpareThreads</code>Tomcat连接器的最大空闲socket 线程数<br><code>maxThreads</code>客户请求最大线程数</p><p>找到如下节点：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>将标签中的<code>autoDeploy=&quot;true&quot;</code>改成<code>false</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/tomcat.jpg&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;为什么要对tomcat进行优化？tomcat下载的时候的默认配置并不能满足生产环境的要求，这个时候就需要我们根据生产环境的配置对tomcat进行相应的优化。下面介绍的只是对tomcat6优化的配置，如果有问题的地方，请指出，谢谢。&lt;/p&gt;
    
    </summary>
    
      <category term="中间件" scheme="https://www.guoxiaohei.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="tomcat" scheme="https://www.guoxiaohei.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Centos下jdk bin格式安装</title>
    <link href="https://www.guoxiaohei.cn/2019/01/29/installation-of-jdk-bin-format-under-centos.html"/>
    <id>https://www.guoxiaohei.cn/2019/01/29/installation-of-jdk-bin-format-under-centos.html</id>
    <published>2019-01-29T11:04:00.000Z</published>
    <updated>2019-06-11T13:05:43.823Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/java.jpg" alt></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Cenots下，使用jdk-bin文件安装jdk。</p><a id="more"></a><h4 id="下载bin文件并赋予权限"><a href="#下载bin文件并赋予权限" class="headerlink" title="下载bin文件并赋予权限"></a>下载bin文件并赋予权限</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> jdk-<span class="number">6</span>u33-linux-i586-rpm.bin</span><br></pre></td></tr></table></figure><h4 id="执行bin文件"><a href="#执行bin文件" class="headerlink" title="执行bin文件"></a>执行bin文件</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ jdk-<span class="number">6</span>u33-linux-i586-rpm.bin</span><br></pre></td></tr></table></figure><p>安装完成以后文件会默认安装在bin所在文件夹的 <code>java /jdk1.6.0_33</code>下.</p><h4 id="配置环境变量在-etc-profile-中加入："><a href="#配置环境变量在-etc-profile-中加入：" class="headerlink" title="配置环境变量在/etc/profile 中加入："></a>配置环境变量在/etc/profile 中加入：</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.<span class="number">6</span>.<span class="number">0</span>_33/</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line"><span class="built_in">PATH</span>=$JAVA_HOME/bin:$<span class="built_in">PATH</span></span><br><span class="line">export JAVA_HOME CLASSPATH <span class="built_in">PATH</span></span><br></pre></td></tr></table></figure><h4 id="运行命令使安装生效"><a href="#运行命令使安装生效" class="headerlink" title="运行命令使安装生效"></a>运行命令使安装生效</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile 使配置文件生效</span><br></pre></td></tr></table></figure><h4 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/java.jpg&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;Cenots下，使用jdk-bin文件安装jdk。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jdk" scheme="https://www.guoxiaohei.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>tomcat环境下服务器文件句柄耗尽（Too Many Open Files）的问题排查</title>
    <link href="https://www.guoxiaohei.cn/2019/01/29/problem-checking-of-too-many-open-files-in-tomcat-environment.html"/>
    <id>https://www.guoxiaohei.cn/2019/01/29/problem-checking-of-too-many-open-files-in-tomcat-environment.html</id>
    <published>2019-01-29T10:18:00.000Z</published>
    <updated>2019-06-11T13:05:43.834Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/kali-linux.png" alt></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前遇到过一次句柄数耗尽的一个问题，具体问题如下。</p><a id="more"></a><p><img src="/images/tomcat linux服务器句柄数耗尽/1.png" alt></p><p>查询了一下资料：原因是服务器的文件句柄数不足，导致tomcat启动失败。</p><p>排除出现场的linux句柄只有50个，而tomcat占用的句柄数应该是超出了这个数值（从需改了linux的句柄数，服务起来了情况进行推断）。</p><p>参考:<a href="https://blog.csdn.net/shootyou/article/details/6579139" target="_blank" rel="noopener">tomcat环境下服务器文件句柄耗尽（Too Many Open Files）的问题排查</a></p><p><strong>ps:</strong> 如果想要查看linux的具体句柄数可以参考下面这篇文章。<a href="https://jingyan.baidu.com/album/75ab0bcbc67b3fd6864db2cc.html?picindex=1" target="_blank" rel="noopener">Linux下查看某进程占用的文件句柄数和线程数</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/kali-linux.png&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;之前遇到过一次句柄数耗尽的一个问题，具体问题如下。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.guoxiaohei.cn/categories/linux/"/>
    
    
      <category term="问题排查" scheme="https://www.guoxiaohei.cn/tags/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Centos防火墙iptables的启动与关闭</title>
    <link href="https://www.guoxiaohei.cn/2019/01/29/start-and-close-of-iptables-in-centos-firewall.html"/>
    <id>https://www.guoxiaohei.cn/2019/01/29/start-and-close-of-iptables-in-centos-firewall.html</id>
    <published>2019-01-29T09:29:00.000Z</published>
    <updated>2019-06-11T13:05:43.824Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --><p><img src="/images/kali-linux.png" alt></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>centos（发行版）防火墙默认firewall 没有安装iptables,这样linux的端口都会被禁止访问。</p><a id="more"></a><h4 id="关闭centos默认防火墙"><a href="#关闭centos默认防火墙" class="headerlink" title="关闭centos默认防火墙"></a>关闭centos默认防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//停止firewall</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld.service    </span><br><span class="line">//禁止firewall开机启动</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h4 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install iptables-services        </span><br><span class="line">#重启防火墙使配置生效</span><br><span class="line">[root@localhost ~]# systemctl restart iptables.service </span><br><span class="line">#设置防火墙开机启动</span><br><span class="line">[root@localhost ~]# systemctl enable iptables.service </span><br><span class="line">#禁止防火墙开机启动</span><br><span class="line">[root@localhost ~]# systemctl disable iptables.service</span><br></pre></td></tr></table></figure><h4 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service iptable status      ---查看防火墙状态</span><br><span class="line">[root@localhost ~]#servcie iptables stop           --临时关闭防火墙</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#service iptables start          --临时启动防火墙</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#service iptables restart          --重启防火墙</span><br><span class="line">[root@localhost ~]#chkconfig iptables off          --永久关闭防火墙</span><br><span class="line">[root@localhost ~]#chkconfig iptables on          --永久开启防火墙</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Aug 25 2019 19:34:25 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;/images/kali-linux.png&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;centos（发行版）防火墙默认firewall 没有安装iptables,这样linux的端口都会被禁止访问。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.guoxiaohei.cn/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://www.guoxiaohei.cn/tags/Centos/"/>
    
  </entry>
  
</feed>
